#!/usr/bin/env python3

from __future__ import print_function

import math, time, argparse, sys, os, signal, asyncio, functools, socket

from glow.Common     import arg_range, arg_positive
from glow.LEDClient  import LEDClient
from glow            import Effect
from glow.Conversion import convert, gamma, toByte, clamp, toHSV, toRGB, multiply

def read_configfile(filename,verbose=False):
    cmdargs = []
    if not os.path.exists(filename):
        if verbose:
            print("Could not open configfile '%s', skipping" % filename)
        return cmdargs
    
    if verbose:
        print("Reading configuration from file '%s'" % filename)

    with open(filename) as f:
        for line in f.readlines():
            line = line.strip()
            if len(line) == 0 or line.startswith('#'): continue
            arg = [ a.strip() for a in line.split('=') ]
            cmdargs.append('--' + arg[0])
            if len(arg) > 1: cmdargs += [ i.strip() for i in arg[1].split() ]
    return cmdargs


@asyncio.coroutine
def main_task(loop,args,leds,effect):
    if args.verbose:
        print("Starting main task")

    uptask = None
    while True:
        is_online = True
        try:
            (yield from asyncio.wait_for(loop.create_connection(
                asyncio.Protocol,host=args.host,port=args.tcpport),
                                         timeout=args.timeout))[0].close()
        except socket.gaierror as e:
            print("Socket Error:", e)
            break
        except asyncio.TimeoutError:
            is_online = False
        except ConnectionRefusedError:
            pass
        if is_online and uptask is None:
            if args.verbose:
                print("Starting update task")
            uptask = asyncio.ensure_future(update_task(args,leds,effect))
        elif not is_online and uptask:
            if args.verbose:
                print("Stopping update task")
            uptask.cancel()
            uptask = None
        yield from asyncio.sleep(args.checkint)
    loop.stop()

@asyncio.coroutine
def update_task(args,leds,effect):
    if args.verbose:
        print("Starting effect '%s'" % args.effect)
        
    while True:
        data = effect.iterate()
        convert(data,
                [ toHSV,
                  multiply((1,1,args.max)),
                  toRGB,
                  gamma(args.gamma),
                  toByte,
                  clamp(0,255)
                ])
        leds.send(data)
        yield from asyncio.sleep(args.time)

def parse_config():
    ## ArgumentParser setup
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-h", "--host", default="localhost", type=str,
                        nargs="?",
                        help="host (default: %(default)s)")
    parser.add_argument("-p", "--port", default=1883, type=int, nargs="?",
                        help="port (default: %(default)s)")
    parser.add_argument("-c", "--color", default=0, type=arg_range(0,1,float),
                        help="set start color/hue, range 0-1" \
                        " (default: %(default)s)")
    parser.add_argument("--config",
                        type=str, help="set config file path")
    parser.add_argument("-d", "--device", default="huzzah", type=str,
                        help="device name (default: %(default)s)")
    parser.add_argument("-e", "--effect", default="Rainbow",
                        choices=Effect.list_all(),
                        help="effect name (default: %(default)s)")
    parser.add_argument("-g", "--grb", action="store_true",
                        help="use GRB order")
    parser.add_argument("--mirror", action="store_true",
                        help="mirror effect at half of the strip")
    parser.add_argument("-n", "--nled", default=120, type=arg_positive(),
                        help="set number of leds (default: %(default)s)")
    parser.add_argument("-o", "--off", default=None, const=True, nargs='?',
                        type=bool, help="set leds off and exit")
    parser.add_argument("--offatexit", action="store_true",
                        help="set leds off at exit")
    parser.add_argument("--pin", default=1, type=int,
                        help="set led pin number (default: %(default)s)")
    parser.add_argument("-r", "--rtype", default="mqtt", type=str,
                        choices=["mqtt","udp"],
                        help="set remote host type")
    parser.add_argument("-m", "--max", default=0.4, type=arg_range(0,1,arg_type=float),
                        help="maximum brightness, range 0-1" \
                        " (default: %(default)s)")
    parser.add_argument("--gamma", default=2.2, type=float,
                        help="gamma value" \
                        " (default: %(default)s)")
    parser.add_argument("-t", "--time", default=1., type=arg_positive(float),
                        help="time between changes in seconds" \
                        " (default: %(default)s)")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="debug output")
    parser.add_argument("--help", action="store_true")
    parser.add_argument("--tcpport", type=int, default=81,
                        help="TCP port used for checking if host is online (default: %(default)s)")
    parser.add_argument("--timeout", type=int, default=2,
                        help="timeout for TCP connections (default: %(default)s)")
    parser.add_argument("--checkint", type=int, default=5,
                        help="time interval for checking host online status in seconds (default: %(default)s)")

    ## parse command line for config file argument
    args, unparsed_args = parser.parse_known_args()

    ## parse config file(s)
    if args.config:
        cmdargs = read_configfile(args.config,verbose=args.verbose)
    else:
        progname = os.path.splitext(os.path.basename(sys.argv[0]))[0]
        cmdargs = read_configfile('/etc/%s.conf' % progname, verbose=args.verbose)
        cmdargs += read_configfile(os.path.join(os.path.expanduser("~"),'.%s.conf' % progname),verbose=args.verbose)

    ## parse command line (for real now)
    args, unparsed_args = parser.parse_known_args(cmdargs + sys.argv[1:])

    ## set up initial effect
    effect_module = None
    if args.effect:
        argparse.ArgumentParser(add_help=False)
        effect_module = Effect.load(args.effect)
        effect_parser = effect_module.create_parser()
        effect_args, unparsed_effect_args = effect_parser.parse_known_args(
            unparsed_args)
        if args.verbose and len(unparsed_effect_args):
            print("Ignoring arguments", unparsed_effect_args)
        args.__dict__.update(vars(effect_args))
    elif args.verbose and len(unparsed_args):
        print("Ignoring arguments", unparsed_args)

    ## print general and effect-specific help
    if args.help:
        parser.print_help()
        if args.effect:
            print()
            effect_parser.print_help()
        sys.exit(0)

    ## print all configuration parameters
    if args.verbose:
        print("Settings:")
        for i in sorted(vars(args).items()):
            print("  %10s: %s" % i)
        print()
    
    return (args, effect_module)
            
if __name__ == "__main__":
    ## parse configuration files and command line arguments
    ## retrieve initial effect module
    args, effect_module = parse_config()

    ## for asyncio debugging
    if args.debug:
        import logging
        logging.basicConfig(level=logging.DEBUG)

    ## create LEDClient and check if we are just switching off
    l = LEDClient(args)
    if args.off:
        if args.verbose:
            print("Switching LEDs off")
        l.off()
        sys.exit(0)

    if args.offatexit:
        import atexit
        atexit.register(l.off)
    
    if args.mirror:
        args.nled /= 2

    ## instantiate initial effect
    e = effect_module.instance(args)

    ## initialize event loop
    loop = asyncio.get_event_loop()
    loop.set_debug(args.debug)
    ## increase to 200ms to prevent output on slow systems
    if not args.debug:
        loop.slow_callback_duration = 0.2

    for signame in ('SIGINT', 'SIGTERM'):
        loop.add_signal_handler(getattr(signal, signame), loop.stop)

    ## create main task
    asyncio.ensure_future(main_task(loop,args,l,e))

    ## start event loop
    try:
        loop.run_forever()
    finally:
        for t in asyncio.Task.all_tasks(): t.cancel()
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
